inherit:
  - names

  - build-system/asdf

  - language/common-lisp

  - boring

variables:

  extra-requires:
    - program: cl-launch
    - meta: quicklisp

    # For archiving but also installing source code
    - program: tar

    - '@{next-value|[]}'

  boring.directories:
    - '@{next-value|[]}'
    - ${lisp.fasl-cache-directory:relative}

  lisp.source-dir: ${lisp.source-dir:${mode}|${lisp.source-dir:default}}
  lisp.source-dir:default: ${dependency-dir}/share/common-lisp/source
  lisp.project-source-dir: ${lisp.source-dir}/${project-name}.${version-name}

  # Source code archiving
  lisp.archive.filename: ${lisp.archive.filename:${mode}|${lisp.archive.filename:default}}
  lisp.archive.filename:default: ${safe-project-and-version-name}.tar.gz

  lisp.archive.exclude: ${lisp.archive.exclude:${mode}|${lisp.archive.exclude:default}}
  lisp.archive.exclude:default: ${boring.everything}
  lisp.archive.exclude.options: '--exclude ${lisp.archive.exclude} '

  lisp.archive.command: ${lisp.archive.command:${mode}|${lisp.archive.command:default}}

  # Building and executing
  lisp.fasl-cache-directory:relative: fasl-cache
  lisp.fasl-cache-directory:absolute: \${WORKSPACE}/${lisp.fasl-cache-directory:relative}

  lisp.environment: ${lisp.environment:${mode}|${lisp.environment:default}}
  lisp.environment:default:
    - ASDF_OUTPUT_TRANSLATIONS=/:${lisp.fasl-cache-directory:absolute}/
  lisp.environment.commands: ${lisp.environment.commands:${mode}|${lisp.environment.commands:default}}
  lisp.environment.commands:default: |
    export "${lisp.environment}"

  lisp.load-systems: ${lisp.load-systems:${mode}|${lisp.load-systems:default}}
  lisp.load-systems:default: ${analysis.systems}
  lisp.load-systems.options: ${lisp.load-systems.options:${mode}|-s ${lisp.load-systems} }

  lisp.test.load-systems: ${lisp.test.load-systems:${mode}|${lisp.test.load-systems:default}}
  lisp.test.load-systems:default: ${lisp.test.systems}
  lisp.test.load-systems.options: ${lisp.test.load-systems.options:${mode}|-s ${lisp.test.load-systems} }
  lisp.test.systems: ${analysis.test-systems|${lisp.load-systems}}
  lisp.test.system-names: '"${lisp.test.systems}" '

  lisp.test.expressions: ${lisp.test.expressions:${mode}|${lisp.test.expressions:default}}
  lisp.test.expressions:default:
    - '(mapc (function asdf:test-system) (list @{lisp.test.system-names}))'
  lisp.test.expression-lines: |
    ${lisp.test.expressions}

  binary-directory: ${binary-directory:${mode}|${binary-directory:default}}
  binary-directory:default: ${dependency-dir}/bin
  binary-directory:ci: ${dependency-dir}/install/bin

  # Commands

  lisp.cl-launch.options-variable: $(upcase ${language.common-lisp.compiler})_OPTIONS
  lisp.cl-launch.command: |-
    ${binary-directory}/cl-launch                                                                                    \
      --lisp ${language.common-lisp.compiler}                                                                        \
      --wrap '${lisp.cl-launch.options-variable}="${lisp.runtime-options| } \${${lisp.cl-launch.options-variable}}"' \

  lisp.source-registry-expression: |-
    (:source-registry                                                 \
      (:tree \"\$(pwd)\")                                             \
      (:tree \"${dependency-dir:absolute}/share/common-lisp/source\") \
      :ignore-inherited-configuration)
  lisp.source-registry-option: |-
    -S "${lisp.source-registry-expression}" \

  # Check FASL cache
  lisp.check-fasl-cache.form: |-
    (let ((file (first (directory "'''"${lisp.fasl-cache-directory:absolute}"'''/**/*.fasl"))))
      (when file
        (handler-case
            (sb-fasl::check-fasl-header (open file :element-type (quote (unsigned-byte 8))))
          (sb-fasl::invalid-fasl-version ()
            (uiop:quit 1)))))

  lisp.check-fasl-cache.command: ${lisp.check-fasl-cache.command:${language.common-lisp.compiler}|true}
  lisp.check-fasl-cache.command:sbcl: |-
    if ! ${lisp.cl-launch.command}
           '${lisp.check-fasl-cache.form}' ; then
      echo "FASL cache in ${lisp.fasl-cache-directory:absolute} is not usable, deleting."
      rm -rf "${lisp.fasl-cache-directory:absolute}"
    fi

  # Ensure dependencies command
  lisp.ensure-dependencies.system-arguments: '"${lisp.load-systems}" '
  lisp.ensure-dependencies.form: |-
    (flet ((ensure-system-dependencies (system)
             (ql:quickload (ql-dist:required-systems (ql-dist:find-system system)))))
      (map nil (function ensure-system-dependencies) (list @{lisp.ensure-dependencies.system-arguments})))
  lisp.ensure-dependencies.options: '-s ${analysis.dependency-systems} '
  lisp.ensure-dependencies.command: |-
    ${lisp.cl-launch.command}
      ${lisp.source-registry-option}
      @{lisp.ensure-dependencies.options}
  #'${lisp.ensure-dependencies.form}'

  # Compile command
  lisp.compile.system-arguments: '"${lisp.load-systems}" '
  lisp.compile.form: |-
    (flet ((compile-system (system)
             (asdf:load-system system :force t)))
      (map nil (function compile-system) (list @{lisp.compile.system-arguments})))
  lisp.compile.expressions:
    - '@{lisp.compile.expressions:${mode}|${lisp.compile.expressions:default}}'
    - "'${lisp.compile.form}'"
  lisp.compile.expressions:default:
    - "'(require :asdf)'"
    - '"(asdf:initialize-source-registry (quote ${lisp.source-registry-expression}))"'
  lisp.compile.expression-options: |2
      --eval ${lisp.compile.expressions} \
  lisp.compile.command: ${lisp.compile.command:${language.common-lisp.compiler}}
  lisp.compile.command:sbcl: |-
    SBCL_HOME=${dependency-dir:absolute}/install/lib/sbcl ${binary-directory}/sbcl \
      --noinform --lose-on-corruption ${lisp.runtime-options| }           \
      --no-userinit --disable-debugger --non-interactive                  \
      @{lisp.compile.expression-options} \
      --quit
  lisp.compile.command:ecl: |-
    ${binary-directory}/ecl \
      @{lisp.compile.expression-options} \
      --eval '(quit)'
  lisp.compile.command:ccl: |-
    ${binary-directory}/../ccl/lx86cl64 \
      --no-init --quiet --batch \
      @{lisp.compile.expression-options} \
      --eval '(quit)'

  # Test command
  lisp.test.command: |-
    ${lisp.cl-launch.command}
      ${lisp.source-registry-option}
      @{lisp.test.load-systems.options}                                  \
      '(progn @{lisp.test.expression-lines})'

  shell.command: ${shell.command:${mode}|${shell.command:default}}
  shell.command:default: |
    # Set up environment
    @{lisp.environment.commands}

    # Flush FASL cache if its contents is no longer compatible with
    # the implementation
    ${lisp.check-fasl-cache.command}

    # Ensure dependencies
    ${lisp.ensure-dependencies.command}

    # Compile
    ${lisp.compile.command}

    # Execute tests
    ${lisp.test.command}

  build-job.tags:
    - cl-launch
    - '@{next-value|[]}'

aspects:
  - name: common-lisp.shell
    aspect: shell
    conditions:
      job.tags: unix
    variables:
      aspect.builder-constraints.shell:
        - [ after, { name: dependency-download } ]
        - [ after, { type: copy-artifact }       ]
      aspect.shell.command: ${shell.command}
