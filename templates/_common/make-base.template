inherit:
  - build-system/make

variables:

  extra-provides:
    - nature: meta
      target: ${project-name}
      version: ${version-name}
    - '@{next-value|[]}'

  make.flags:
    - -j${make.threads|1}
    - '@{next-value|[]}'

  make.flags:win32: []
  make.flags.args: '${make.flags} '

  make.build.targets.args: '${make.build.targets} '
  make.build.command: ${make.binary} @{make.flags.args} @{make.build.targets.args}

  make.test.targets.args: '${make.test.targets} '
  make.test.command: ${make.test.command:relaxed}
  make.test.command:enforced: ${make.binary} @{make.flags.args} @{make.test.targets.args}
  make.test.command:strong: |
    ${make.test._write_testresult}
    ${make.test.command:enforced} || write_testresult $?
  make.test.command:relaxed: |
    ${make.test._write_testresult}
    ${make.binary} -q @{make.test.targets.args} || result=$?
    if [ $result -ne 2 ] ; then  # Are the test targets actually available?
      ${make.test.command:enforced} || write_testresult $?
    else
      rm -f make_test_result.xml  # Remove old test result
    fi

  make.test._write_testresult: |
    write_testresult() {
      date=\$(date -Iseconds)
      cat > make_test_result.xml <<EOF
    <?xml version='1.0' encoding='UTF-8'?>
    <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='\${date}' time='1' name='make_test'>
      <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
        <testcase name='make_test' status='run' time='0'></testcase>
      </testsuite>
    </testsuites>
    EOF
      if [ \$1 -gt 0 ] ; then
        sed -i -e "s/failures='0'/failures='1'/g" \
               -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
               make_test_result.xml
      fi
    }

  junit.patterns:
  - '**/make_test_result.xml'
  - '@{next-value|[]}'

  archive-pattern: ${archive-name}

  archive-name: ${project-name}-${version-name}.tar.gz

  make.install.targets.args: '${make.install.targets} '
  make.install.command: ${make.binary} @{make.flags.args} @{make.install.targets.args}

  make.package.targets.args: '${make.package.targets} '
  make.package.command: |
    DESTDIR="\${WORKSPACE}/install" \
      ${make.binary} @{make.flags.args} @{make.package.targets.args}

    (
      cd "\${WORKSPACE}"
      tar -czf "${archive-name}" install
    )

  make.build.targets: []

  make.command:
    ${make.build.command}

  shell.command: |
    @{environment.exports}

    ${make.command}

aspects:
  - name: make.shell
    aspect: shell
    conditions:
      job.tags: unix
    variables:
      environment.exports: |
        export ${shell.environment|[]}
      aspect.shell.command: ${shell.command}

  - name: make.batch
    aspect: batch
    conditions:
      job.tags: win32
    variables:
      environment.exports: |
        set ${shell.environment:win32|${shell.environment|[]}}
      aspect.batch.command: |
        ${setup.build.environment:win32}
        ${shell.command:win32|${shell.command}}
